<!--
Naturalis internship repository for UMI isolation tool.
Copyright (C) 2019 Jasper Boom

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as
published by the Free Software Foundation, either version 3 of the
License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program. If not, see <https://www.gnu.org/licenses/>.

Contact information: info@jboom.org.
-->
<?xml version="1.0" encoding="utf-8"?>
<tool id="umi-isolation" name="Cluster on umis" version="0.1.0">
    <description>
        Use a python script to cluster all umis and output a tabular file, a
        blast file and a zip file.
    </description>
    <requirements>
        <requirement type="package" version="3.6.8">python</requirement>
        <requirement type="package" version="0.25.0">pandas</requirement>
        <requirement type="package" version="3.0">zip</requirement>
        <requirement type="package" version="2.13.6">vsearch</requirement>
    </requirements>
    <!-- Call the umi-isolation script, set input parameters according to user
         choices. -->
    <command><![CDATA[
        bash "$__tool_directory__/umi-isolation.sh" \
            -o ${output_tabular} \
            -z ${output_zip} \
            -q ${blast_file} \
            -p ${process} \
            -f ${input.single} \
            -l ${umi_length} \
            -s ${search_method} \
            -a ${forward} \
            -b ${reverse} \
            -d ${identity_score} \
            -u ${abundance_score}
        #if $input.single == "fastq"
            -i $input.single_fastq
        #elif $input.single == "fasta"
            -i $input.single_fasta
        #end if
    ]]></command>
    <inputs>
        <!-- Catch the input file. -->
        <conditional name="input">
            <param name="single" type="select" label="Fastq or fasta file."
                   multiple="false">
                <option value="fastq" selected="true">FastQ file</option>
                <option value="fasta">FastA file</option>
            </param>
            <when value="fastq">
                <param name="single_fastq" type="data" format="fastq"
                       label="Fastq file."/>
            </when>
            <when value="fasta">
                <param name="single_fasta" type="data" format="fasta"
                       label="Fasta file."/>
            </when>
        </conditional>
        <!-- Catch the search approach. -->
        <param name="process" type="select"
               label="Primer, scaffold(adapter) or first position?"
               multiple="false"
               help="The tool will use the following format: [Forward_Scaffold(Adapter)]-[Forward_UMI]-[Forward_Primer]--READ--[Reverse_Primer]-[Reverse_UMI]-[Reverse_Scaffold(Adapter)]">
            <option value="primer" selected="true">Primer search</option>
            <option value="scaffold">Scaffold(adapter) search</option>
            <option value="zero">First position search</option>
        </param>
        <!-- Catch the number of umis per read. -->
        <param name="search_method" type="select"
               label="Search umis at 5'-end [umi5], 3'-end [umi3] or at 5'-end and 3'-end [umidouble]"
               multiple="false"
               help="Searching with umi5 instructs the tool to only search for umis at the start of every read, searching with umi3 instructs the tool to only search for umis at the end of every read, while umidouble will instruct the tool to collect umis on both the start and end of every read">
            <option value="umi5" selected="true">5'-end UMI</option>
            <option value="umi3">3'-end UMI</option>
            <option value="umidouble">Two end UMIs</option>
        </param>
        <!-- Catch the search nucleotides and length. -->
        <param name="forward" size="50" type="text" value="NNNNNNNNNNNNNNN"
               label="The 5'-end search nucleotides (UPPERCASE)"/>
        <param name="reverse" size="50" type="text" value="NNNNNNNNNNNNNNN"
               label="The 3'-end search nucleotides (UPPERCASE)"/>
        <param name="umi_length" type="integer"
               label="The length of the umi sequences (INTEGER)" value="0" min="0"
               help="Enter a integer that represents the length of a single umi"/>
        <param name="abundance_score" type="integer" label="The minimum abundance with which a read needs to be present in order to not be discarded" value="1" min="1" />
        <param name="identity_score" type="float" value="0.97" min="0.1" max="1"
               label="The identity percentage with which vsearch will cluster isolated reads within a single umi fasta file"/>
    </inputs>
    <outputs>
        <!-- Catch the output file. -->
        <data format="tabular" name="output_tabular"
              label="UMI_Accumulation_Table">
        </data>
        <data format="fasta" name="blast_file" label="UMI_Accumulation_BLAST">
        </data>
        <data format="zip" name="output_zip" label="UMI_Accumulation_Zip">
        </data>
    </outputs>
    <tests>
    </tests>
    <help>
        .. class:: infomark

        Use a python script to accumulate all umis and output a tabular file,
        a blast file and a zip file.

        .. class:: infomark

        The tabular file will contain all unique umi nucleotides, a count of
        the number of reads that are associated with that umi and a unique
        identifier for every umi.

        .. class:: infomark

        The blast file can be used to identify all umi clusters.

        .. class:: infomark

        The zip file will contain fasta files for every unique umi and contain
        reads associated with that umi, this zip file is created before vsearch
        is used for a final check.

        .. class:: warningmark

        Every read in a fasta file should have a header starting with >.
        Every read in a fastq file should have a header starting with @.
        Every read in a fasta/fastq file should be on one line. For instance
        they can not be "human readable" and have a "\\n" after every 80
        characters.
        
    </help>
</tool>